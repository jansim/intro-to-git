---
title: "Intro to `git`"
subtitle: "Block 2.2: History"
---

# Traveling Through Time: `git log` {background-color="black" background-opacity="0.5" background-image="images/backgrounds/back-to-the-future-time.gif"}

::: attribution
Background: https://giphy.com/gifs/back-to-the-future-dgEIhYAo3lZiE
:::

## Seeing History

We can also see the history of our committed changes, called `commits` using `git log`.

```bash
git log
# commit ed226e022f60d9f578265c2c246367f5f07756de (HEAD -> main)
# Author: Jan Simson <git@simson.io>
# Date:   Fri Sep 16 17:00:03 2022 +0200

#     Edit hello.txt

# commit 795780d123f6eeedaa09734005c08d1ad89c1976
# Author: Jan Simson <git@simson.io>
# Date:   Fri Sep 16 16:59:45 2022 +0200

# Adding hello.txt

# lines 1-9
```

You can move up and down with the arrow keys and leave the log view by pressing `q`.

## Practical: Seeing History {background-color="black"}

1. Go back to your Terminal
2. Open the `git log` of your respository
3. Navigate up and down in the history
4. Copy the commit hash of the 2nd commit you made in the repository
5. Also explore the git history in a GUI

# *Properly* Traveling Through Time: <br> `git checkout`  {background-color="black" background-opacity="0.5" background-image="images/backgrounds/back-to-the-future-travel.gif"}

::: attribution
Background: https://giphy.com/gifs/back-to-the-future-xsF1FSDbjguis
:::

## `git checkout`

You can go back to any previous commit (and many other things!) with `git checkout`.

```bash
git log
# commit ed226e022f60d9f578265c2c246367f5f07756de (HEAD -> main)
# Author: Jan Simson <git@simson.io>
# Date:   Fri Sep 16 17:00:03 2022 +0200

#     Edit hello.txt

# commit 795780d123f6eeedaa09734005c08d1ad89c1976
# Author: Jan Simson <git@simson.io>
# Date:   Fri Sep 16 16:59:45 2022 +0200

# Adding hello.txt

# lines 1-9
```

## `git checkout`

You can go back to any previous commit (and many other things!) with `git checkout`.

```bash
git checkout 795780d123f6eeedaa09734005c08d1ad89c1976
```

## `git checkout`

You can go back to any previous commit (and many other things!) with `git checkout`.

```bash
git checkout 795780d
```

:::{.callout-tip}
You don't need to pass the whole commit hash, just the first few characters are usually enough.
:::

## `git checkout`

You can go back to any previous commit (and many other things!) with `git checkout`.

```bash
git checkout 795780d
# Note: switching to '795780d123f6eeedaa09734005c08d1ad89c1976'.
#
# You are in 'detached HEAD' state. You can look around, make experimental
# changes and commit them, and you can discard any commits you make in this
# state without impacting any branches by switching back to a branch.
#
# If you want to create a new branch to retain commits you create, you may
# do so (now or later) by using -c with the switch command. Example:
#
#   git switch -c <new-branch-name>
#
# Or undo this operation with:
#
#   git switch -
#
# Turn off this advice by setting config variable advice.detachedHead to false
#
# HEAD is now at 795780d Adding hello.txt
```

## Detached HEAD, everything OK? ü§ï

- When traveling back to a commit, we got a scary warning about a `detached HEAD`
- Normally we are always on a branch in git
- The HEAD is always the currently checked out state of your repository
  - If the HEAD is detached, it is not associated with a branch
  - If we make commits with a detached HEAD our changes will be lost
- We can go back to `main` with `git checkout main`

## Tracking changes: Using a GUI

![The labels in Sourcetree mirror the names within the git CLI](images/screenshots/sourcetree-test.png)

# Questions?

## Practical: Murder Mystery (Setup) üëÆ {background-color="black"  background-opacity="0.3" background-image="images/backgrounds/murder-mystery.jpg"}

1. We will copy a repository from the internet.
2. Navigate your Terminal to `repositories`
3. Navigate to that directory in your Terminal.
4. Run the following command `git clone https://github.com/open-teaching/git-murder-mystery.git`

## Practical: git Murder Mystery üïµÔ∏è {background-color="black"  background-opacity="0.3" background-image="images/backgrounds/murder-mystery.jpg"}

1. Unravel the murder case.
   - Use `git log` to see the history of the repository
   - Use `git checkout` to travel through time
2. Compare the different suspects over time to determine who was present at all three scenes.

## *End of Block* üéâ {background-color="black"}

:::{.r-fit-text}
Any Questions?
:::

[[üè° Back to Overview]](./index.html)

[[‚è©Ô∏è Next Block]](./2.3-branches_merging.html) 
