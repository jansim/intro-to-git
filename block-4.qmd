---
title: "Intro to `git`"
subtitle: "Block 4"
---

# Using GitHub to its full potential

## Issues

- System to track tasks that still need to be done
- Allows for discussion
- When an issue is done, it is "closed"

::: {.fragment}
:::{.callout-tip}
Each issue get's its own number (e.g. #12). When you reference an issues commit number with a keyword like "fix", it will automatically be closed.
:::
:::

## Issues: Overview

![Overview of the issues page in a GitHub repository](/images/screenshots/gh-issues.png)

::: attribution
Repository: <https://github.com/CorrelAid/datenguideR/>
:::

## Issues: Detailed View

![View of a single issue on GitHub](/images/screenshots/gh-issue.png)

::: attribution
Repository: <https://github.com/CorrelAid/datenguideR/>
:::

## Forking

- You can easily copy public repositories into your own GitHub account, by `forking` them
- This way, you get your own remote version of the respository
  - You can still contribute your changes back to the original repository
  - The two repositories stay linked on GitHub
- This happens in GitHub not git

## Pull Requests (PRs)

- When collaborating with other people, it's often good to review each other's changes
- This is easiest done by using pull requests
  - You *request* for someone to *pull* your changes

## Pull requests: Overview

![Overview of the pull requests page in a GitHub repository](/images/screenshots/gh-prs.png)

::: attribution
Repository: <https://github.com/CorrelAid/datenguideR>
:::

## Pull requests: Detailed View

![View of a single pull request on GitHub](/images/screenshots/gh-pr.png)

::: attribution
Repository: <https://github.com/CorrelAid/datenguideR>
:::

## Why Issues & Pull Requests are Necessary

![Right now, the VSCode GitHub repository has >5000 issues and almost 400 PRs](/images/screenshots/gh-vscode.png)

::: attribution
Repository: <https://github.com/microsoft/vscode>
:::

## When Should you Start using Issues & PRs?

- Maybe your project doesn't need these features yet
- Often it makes sense to use pull requests even when collaborating with just a few people
  - To avoid merge conflicts
  - Also for reviewing each others changes
- Many companies require code reviews and using PRs

# Questions?

## Practical: Collaborating via GitHub{background-color="black"}

1. Form groups of 2 - 3 people (we need exactly 10 teams total)
2. I will assign a topic from the list for each team.
3. Clone the final course repository: <https://github.com/open-teaching/git-course-summary-ws22>
4. One person per team should create a new branch called `team-<your number>`, then `push` it to the hosted repo
5. Run `git fetch` to get the latest changes
6. Everyone else should copy that branch by running `git checkout -b <team-#> origin/<team-#>`

## Practical: Collaborating via GitHub (using PRs) {background-color="black"}

1. Write a short section explaining your topic together.
2. Multiple people should collaborate on this section and not all commits should be from one GitHub account.
3. Create a pull request to add your edits to the main repository. The title of the pull request should contain your team number and topic.

## Practical: Collaborating via GitHub (using PRs) {background-color="black"}

1. Review the pull requestion of the next team (by number) and provide feedback / make some edits.
    - Feel free to use the internet to find additional details if you need to.
    - Use the pull request to discuss
2. Approve the pull request when you're done and all changes are implemented.
3. Merge your edits into the repository.

# The Final Bits

## Contributing to Open-Source

- Don't be scared to make your own work public
- If you see a project on GitHub you want to contribute to, just comment on an issue
  - People are often happy about contributions
  - It can be a lot of work to maintain a busy project though, so also expect that
- There are also events like: [Hacktoberfest](https://hacktoberfest.com/)

## Licenses

- Repositories often have a LICENSE file at their root
- This indiciates the LICENSE the code is under and how you are allowed to use it
- If you make your own code / repository public, make sure to pick a proper license
- To help you pick a license: https://choosealicense.com/

## Making your Repository Citeable

- You can assign a doi (digital object identifier) to your repository using [Zenodo](https://zenodo.org/about)
  - Steps are outlined in this [guide](https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content)
- You can also add an official `CITATION` file, so people know how to cite the repository
  - Steps are outlined in this [guide](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files)

## Advanced Github

- You can easily start an in-browser version of VSCode on github
  - Just change URL from <https://github.com> to <https://github.dev>
  - Or press the `.` key, inside a repository
- You can automatically run code via [GitHub Actions](https://github.com/features/actions)
- You can get all sorts of goodies via the [GitHub Student Pack](https://education.github.com/pack)

## Final Summary

- Initialize a repository with `git init`
- Whenever you made a substantial change, put it into the history with `git commit`
- See your history with `git log`
- Move around (history and branches!) with `git checkout`
- Create new branches with `git checkout -b`
- To collaborate, first `git pull` others changes, then `git push` yours

# Outlook

## Guides to Re-Visit

Most of the information in these guides, we already covered, but they can be great if you want to re-visit anything.

- https://github.com/git-guides
- [Introduction to RStudio Git & GitHub](https://malikaihle.github.io/Introduction-RStudio-Git-GitHub/)
- [The Carpentries: Version Control with Git](https://swcarpentry.github.io/git-novice/)
- https://gitimmersion.com

## Further Reading

- Popular Workflow: [Trunk Based Development](https://www.atlassian.com/continuous-delivery/continuous-integration/trunk-based-development)
- Using git with data
  - [git lfs](https://git-lfs.github.com/)
  - [dvc](https://dvc.org/): Data Version Control
- If you have a problem
  - [ohshitgit.com](https://ohshitgit.com/) [(ðŸ‡©ðŸ‡ª)](https://ohshitgit.com/de)
  - Google

# Evaluation

## Feedback

- Did you feel like you understood all the topics we covered?
- Would you have wanted more focus on a particular topic?
- Do you have any other feedback? Ideas for improvements?

## Sources

This course uses materials from, builds upon and is inspired by the following resources

- [The Carpentries: Version Control with Git](https://swcarpentry.github.io/git-novice/)
- https://malikaihle.github.io/Introduction-RStudio-Git-GitHub/
- https://github.com/edunford/git-scavenger-hunt
- https://gitimmersion.com

# The End, Thank You!
