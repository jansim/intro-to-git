---
title: "Intro to `git`"
subtitle: "Block 2"
---

# Ignoring things: `.gitignore`

## Ignoring files via `.gitignore`

- By default, git will track *all* the files in your repository.
- If you want it to ignore certain files or filetypes, you have to tell it so explicitly.
- You can do this by using a file called `.gitignore`
  - Every file will be compared against the list in `.gitignore` and if it matches, git will ignore the file
- The `.gitignore` file *itself* is tracked just like any other file

## `.gitignore`: classic examples

```
# Ignore every file called myfile.pdf
myfile.pdf
```

```
# Ignore the file called myfile.pdf in the folder reports at the root of your *repository*
/reports/myfile.pdf
```

```
# Ignore all PDF files
*.pdf
```

You can find a list of very useful templates for `.gitignore` files at <https://github.com/github/gitignore>.

<!-- TODO: Global vs. Local .gitignore?, pratical  -->

# Traveling Through Time: `git log` {background-color="black" background-opacity="0.5" background-image="/images/backgrounds/back-to-the-future-time.gif"}

::: attribution
Background: https://giphy.com/gifs/back-to-the-future-dgEIhYAo3lZiE
:::

## Seeing History

We can also see the history of our committed changes, called `commits` using `git log`.

```bash
git log
# commit ed226e022f60d9f578265c2c246367f5f07756de (HEAD -> main)
# Author: Jan Simson <git@simson.io>
# Date:   Fri Sep 16 17:00:03 2022 +0200

#     Edit hello.txt

# commit 795780d123f6eeedaa09734005c08d1ad89c1976
# Author: Jan Simson <git@simson.io>
# Date:   Fri Sep 16 16:59:45 2022 +0200

# Adding hello.txt

# lines 1-9
```

You can move up and down with the arrow keys and leave the log view by pressing `q`.

## Seeing History: practical

1. Go back to your Terminal
2. Open the `git log` of your respository

# *Properly* Traveling Through Time: <br> `git checkout`  {background-color="black" background-opacity="0.5" background-image="/images/backgrounds/back-to-the-future-travel.gif"}

::: attribution
Background: https://giphy.com/gifs/back-to-the-future-xsF1FSDbjguis
:::

## `git checkout`

You can go back to any previous commit (and many other things!) with `git checkout`.

```bash
git log
# commit ed226e022f60d9f578265c2c246367f5f07756de (HEAD -> main)
# Author: Jan Simson <git@simson.io>
# Date:   Fri Sep 16 17:00:03 2022 +0200

#     Edit hello.txt

# commit 795780d123f6eeedaa09734005c08d1ad89c1976
# Author: Jan Simson <git@simson.io>
# Date:   Fri Sep 16 16:59:45 2022 +0200

# Adding hello.txt

# lines 1-9
```

## `git checkout`

You can go back to any previous commit (and many other things!) with `git checkout`.

```bash
git checkout 795780d123f6eeedaa09734005c08d1ad89c1976
```

## `git checkout`

You can go back to any previous commit (and many other things!) with `git checkout`.

```bash
git checkout 795780d
```

:::{.callout-tip}
You don't need to pass the whole commit hash, just the first few characters are usually enough.
:::

## `git checkout`

You can go back to any previous commit (and many other things!) with `git checkout`.

```bash
git checkout 795780d
# Note: switching to '795780d123f6eeedaa09734005c08d1ad89c1976'.
#
# You are in 'detached HEAD' state. You can look around, make experimental
# changes and commit them, and you can discard any commits you make in this
# state without impacting any branches by switching back to a branch.
#
# If you want to create a new branch to retain commits you create, you may
# do so (now or later) by using -c with the switch command. Example:
#
#   git switch -c <new-branch-name>
#
# Or undo this operation with:
#
#   git switch -
#
# Turn off this advice by setting config variable advice.detachedHead to false
#
# HEAD is now at 795780d Adding hello.txt
```

## Detached HEAD, everything OK? ü§ï

- When traveling back to a commit, we got a scary warning about a `detached HEAD`
- Normally we are always on a branch in git
- The HEAD is always the currently checked out state of your repository
  - If the HEAD is detached, it is not associated with a branch
  - If we make commits with a detached HEAD our changes will be lost
- We can go back to `main` with `git checkout main`

# Questions?

## Practical: git scavenger hunt (setup)

1. We will copy a repository from the internet.
2. Create a new directory or use an existing one, in which you want to copy the new repository.
3. Navigate to that directory in your Terminal.
4. Run the following command `git clone git@github.com:jansim/git-scavenger-hunt.git`

## Practical: git scavenger hunt (part 1/2)

Answer the following questions `git`.

1. What is the title of the news story?
2. What changes were made to the news story in commit (3a2823824)?
3. What other Jane Austen novel data was added after Pride and Prejudice?
4. Return to `main` when you are done.

Use `git log` and `git checkout` to help you here.

::: attribution
Brought to you by edunford on github.com
:::

## Tracking changes: In SourceTree

<!-- TODO: adapt -->
![The labels in Sourcetree mirror the names within the git CLI](images/screenshots/sourcetree-test.png)

In between each step, check the repository and file status with the Sourcetree UI.

## Practical: git scavenger hunt (part 2/2)

Answer the following questions using SourceTree.

4. How many dog pictures were initially added to the dog_pictures folder?
5. What was the last change made on the "dogs" branch before it was merged with the "temp"?
6. What is the tag name for the commit where the readme was changed?

::: attribution
Brought to you by edunford on github.com
:::

# Alternate Realities: <br> `git branches` {background-color="black" background-opacity="0.7" background-image="/images/backgrounds/suganth-V1YEEItoOTE-unsplash.jpg"}

::: attribution
Background: https://unsplash.com/photos/V1YEEItoOTE
:::

## What are git branches? üå≥

- Branches allow you to have different versions of your code within the same repository next to each other
- You can switch back and forth between branches
- In the end you can merge your changes back into your `main` branch

:::{.callout-note}
The default branch used to be called `master`, this was more-or-less recently changed to `main`, but not all repositories have changed yet.
:::

## What are git branches? üå≤

![Example of a repository history with branching](images/screenshots/learngitbranching/branched.png)

## Creating new branches

- There are two ways to create new branches
- `git checkout -b my-branch` ‚úÖ
  - Create a new branch and immediately check it out
- `git branch my-branch` ‚ùå
  - Create a new branch, but **don't** check it out

```bash
git checkout -b my-branch
# Switched to a new branch 'my-branch'
```

## Working on branches

- So far you have always been working on a single branch: `main`
- Nothing changes when working with multiple branches, you just have to keep an eye on your current branch

```bash
git status
# On branch my-branch
# nothing to commit, working tree clean
```

## Switching branches

You can switch branches with `git checkout` (as we've already done earlier)

```bash
git checkout my-branch
```

:::{.callout-tip}
There's no more `-b` when the branch already exists
:::

:::{.callout-note}
You can also use `git switch my-branch`, but this command is still experimental right now and may change.
:::

## Bringig it all together: Merging

- You can combine two different branches by merging them with each other
- `git merge my-branch`
  - You will merge the branch that you name in the command *into* the one you are currently on
  - In most cases you will want to be on the `main` branch when using `git merge` (but not always!)

:::{.callout-note}
Only branches with a shared history can be merged, but this should (almost) always be the case.
:::

## Visual Example of Merging

![Example of a merged repository history](images/screenshots/learngitbranching/merged.png)

# Demo: [learngitbranching.js.org](https://learngitbranching.js.org/?NODEMO?) {background-color="black" background-opacity="0.7" background-image="/images/backgrounds/berlin-demo-govid-loAFGkJxYzgxu3NKnZ.gif"}

::: attribution
Background: https://giphy.com/gifs/berlin-demo-govid-loAFGkJxYzgxu3NKnZ
:::

## PRACTICAL

<!-- TODO: PRACTICAL -->

# The Ugly Side of `git`: Merge Conflicts {background-color="black" background-opacity="0.5" background-image="/images/backgrounds/git-merge-cFkiFMDg3iFoI.gif"}

## What are Merge Conflicts?

- `git` is very smart in the way it combines changes from two branches
  - **But** there's not always a clear solution
- If git doesn't know how to merge the two branches, we get a *merge conflict*
  - Merge conflicts have to be manually resolved (by us)

## How to Get a Merge Conflict üß®

And how to avoid it.

- Merge conflcits occur when there are edits to the same file (and at the same location) on two different branches
- If you merge your branches / edits before making more changes, you can avoid conflicts

## Merge Conflicts: Illustration (1)

![Starting situation, each box corresponds to the file's contents in a commit](images/drawings/merge-conflict-start.svg)

## Merge Conflicts: Illustration (2)

![The merge conflict arises because both change the same line](images/drawings/merge-conflict-end.svg)

## Merge Conflicts: Illustration (3)

![We could've avoided the merge conflict, by merging main into feature before doing the change on feature](images/drawings/merge-conflict-avoid.svg)

## Resolving Merge Conflicts

- To resolve a merge conflict, we will have to pick one of the two versions
  - Once a solution is picked for every conflict you can commit the solution and the merge continues / finishes
- Picking a solution is easiest to do by using GUI tools
  - Both Sourcetree and VSCode have great UIs for this

# DEMO: Resolving merge conflicts in VS Code and SourceTree

# PRACTICAL (maybe two practicals?)

<!-- TODO: PRACTICAL -->

## Extra Practical: *learngitbranching*

1. Go to https://learngitbranching.js.org/
2. Finish Lessons 1, 2 and 3 on the website

## Rebasing

<!-- TODO: REBASING -->

