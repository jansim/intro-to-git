---
title: "Intro to `git`"
subtitle: "Block 1"
---

# Intro to the course

## First things first: Language üá¨üáß/üá©üá™

::: {.nonincremental}

- Slides are in English
- Spoken: German or English?
  - Do you have a preference / does anyone not speak German?

:::

## What is the course about?

- **Goal**: Learn everything that is necessary to effectively use `git` in the future
- **Format**: Mix of theory & practicals
  - Feel free to always ask questions any time!
- **Agenda**
  - Block 1: Introduction & Basics
  - Block 2: Branches & More
  - Block 3: Collaboration via Github
  - Block 4: Advanced Github & Beyond

## Timeline

::: {.nonincremental}

- 10:00 - 11:30 1st Block (1:30)
- 11:30 - 11:45 Pause
- 11:45 - 13:00 2nd Block (1:15)
- 13:00 - 14:00 Lunchbreak
- 14:00 - 15:15 3rd Block (1:15)
- 15:15 - 15:30 Pause
- 15:30 - 16:45 4th Block (1:15)

:::

## Introductions: Who am I? üôãüèº‚Äç‚ôÇÔ∏è

- Jan Simson
- Doing PhD at Ludwig-Maximilian University M√ºnchen
- Background
  - BSc Psychology (Konstanz)
  - MSc Behavioural Data Science (Amsterdam)
  - Computer Science (Ausbildung)
  - Worked at research lab & startup before
- Worked with `git` for a couple of years

## Introductions: Who are you? üôãüèª‚Äç‚ôÄÔ∏èüôãüèΩ‚Äç‚ôÇÔ∏èüôã

Quick Round of Introductions

::: {.nonincremental}

- What's your name & which program are you enrolled in?
- Have you heard about git before?
  - Do you have any experience with git already?
- What do you wish to learn from this course?

:::

## Introductions: Administration üìú

- Is everyone registered for the course?
- Could you please repeat your name and GitHub Username (to add to the list)

## Prerequisites (Any Problems?)

- Software
  - *git*: The tool itself
  - *Sourcetree*: A graphical user interface (GUI) to use git
  - *Visual Studio Code*: A text editor, which also allows using git via its GUI

- *GitHub*: Website to collaborate via git

## Text Editor: Visual Studio Code

![Screenshot of VS Code](images/screenshots/vscode.png)

## Text Editor: Visual Studio Code

- Text Editor: A program to write text
  - Only text i.e. no layouting / formatting (unlike Microsoft Word)

- Quick Demonstration
  - Opening workbench in a folder

## Text Editing: Practical {background-color="black"}

1. Open Visual Studio Code on your computer
    - Explore the UI
    - Set a theme if you want to
2. Create a new folder called `git-exercise`
3. Open the folder in Visual Studio Code
    - Create a new file `test.txt` and write in it <br> `Hello World!`

# Intro to `git`  {background-color="black" background-opacity="0.3" background-image="images/backgrounds/yancy-min-842ofHC6MaI-unsplash.jpg"}

::: attribution
Background: https://unsplash.com/photos/842ofHC6MaI
:::

## What is git?

- Version Control System (VCS)
  - Looks at the changes in your files
  - Records all changes over time to give you a full history
  - Similar to "track changes" in Microsoft Word / LibreOffice

::: {.fragment}

![Git only looks at and tracks the *changes* in a file](images/carpentries/play-changes.svg)

:::

## What is git? *Strengths* & Weaknesses

- Strengths üí™
  - Very hard to lose files with git
  - Great for collaboration
  - Fast (like, really fast)
  - History allows you to go back and understand changes or revert when there are problems
  - Reproducibility

## What is git? Strengths & *Weaknesses*

- Weaknesses üò¢
  - Can be a bit complicated to use (esp. at first)
  - History takes up file space (but only little)
  - Struggles with binary (i.e. non-text) files
  - Struggles with large files
    - Not good for storing data!
  - You do need to *explicitly* use it i.e. it doesn't just work in the background

## CLI vs. GUI?!

Git can be used via both a CLI and GUI.

:::: {.columns}

::: {.column width="50%"}
*Command Line Interface (CLI)*

- Also Console or Terminal
- Only text
- You type your command, press enter and receive back text
- *Very* flexible, but a bit unintuitive
:::

::: {.column width="50%"}
*Graphical User Interface (GUI)*

- Most applications nowadays
- Often asier to use
- Typically mainly controlled via your Mouse
- Buttons and other clickable elements
:::

::::

## CLI vs. GUI?!

:::: {.columns}

::: {.column width="50%"}
![An example of using git in a command line interface (CLI)](images/screenshots/terminal-empty.png)
:::

::: {.column width="50%"}
![An example of using git in SourceTree, a graphical user interface (GUI)](images/screenshots/sourcetree-test.png)
:::

::::

## CLI vs. GUI: `git`

- `git` itself is a CLI program
- But, many GUIs are available
  - Sourcetree
  - Visual Studio Code*
  - Rstudio*
  - Github Desktop
  - ... (full list: <https://git-scm.com/downloads/guis>)

::: {.fragment}

*: These programs have a different main purpose, but also offer the option of using git via their GUI.

:::

## Using the `git` CLI

- We will first use git via its CLI (i.e. in the Terminal).
  - On windows, open Git Bash (start menu -> Git Bash).
  - On MacOS, open the Terminal app.
  - On Linux, open your distribution‚Äôs (or any other) terminal emulator.
- Let's do this together now!

## Using the `git` cheatsheet to follow along

- There are many existing cheatsheets out there with the most important git commands
- In this course we will be using the one from [GitHub Education](resources/git-cheat-sheet-education.pdf) to help you navigate the course

## Let's Set Things Up: `git config` ‚öôÔ∏è

Run the following commands in your terminal to correctly configure git on your computer.

```bash
# Add your name
git config --global user.name "Your Name"

# Add your email address
git config --global user.email "your.email@kit.edu"
```

## Let's Set Things Up: `git config` ‚öôÔ∏è

For Linux/Mac:

```bash
git config --global core.autocrlf input
```

For Windows:

```bash
git config --global core.autocrlf true
```

Why? Windows saves linebreaks (enter) differently then Linux/Mac does ü§∑‚Äç‚ôÇÔ∏è

# Getting started with git (for real)

## See what's happening: `git status`

A project in git is called a **repository** (or **repo** for short) and it always corresponds to a directory on your machine.

To see the current status of a git repository you can run the `status` command.

```bash
git status
```

## See what's happening: `git status`

```bash
git status
# fatal: not a git repository (or any of the parent directories): .git
```

We get an error here, because you first need to *initialize* a git repository.

## Initializing a repository: `git init`

Before we can use git in a project we first have to initialize it in the directory of the project. This is done via the `init` command.

```bash
git init
# Initialized empty Git repository in /Users/jan/Dev/temp/test/.git/

git status
# On branch main
# No commits yet
# nothing to commit (create/copy files and use "git add" to track)
```

With `git init` we turn the *directory* into a *repository*.

# Interim: Filepaths

## Interim: What are Filepaths?

- Every file and directory on your computer has a distinct address, its "filepath"
  - That's the names of all the nested directories, separated by `/` (Mac / Linux) or `\` (Windows)
- Filepaths can be either...
  - absolute: `/Users/jan/Dev/temp/example.txt` (we ignore these)
  - relative: `./example.txt`
    - here the path is relative to the working directory `/Users/jan/Dev/temp/`

# Filepaths Demo in Finder

## Practical: Filespaths {background-color="black"}

1. Identify the filepath of the **directory** you created earlier.
2. Open the Terminal
  - Windows: start menu -> Git Bash, MacOS: Terminal app
3. Type `cd`, followed by a space and the path to the directory into the Terminal.
4. Use `pwd` to show your current working directory.

# Tracking changes in git

## The 3 Levels of Changes in git

![Changes can be either unstaged, staged or commited.](images/carpentries/git-staging-area.svg)

- When we first make a change it is *unstaged*
- Once we `add` the change to the staging area it is *staged*
- We can then `commit` all *staged* changes

## Tracking Changes: `git add` and `git commit`

![](images/carpentries/git-staging-area.svg)

Files are added to the staging area with <br> `git add <path to file or directory>`

All files in the staging area are commited with <br> `git commit`

## Tracking Changes: `git add`

Files are added to the staging area with <br> `git add <path to file or directory>`.

```bash
# ...we write something into example.txt

git status
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#   example.txt
```

Add `example.txt` to the staging area

```bash
git add example.txt

git status
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
#   new file:   example.txt
```

## Tracking Changes: `git add`

Changes are added to the staging area with <br> `git add <path to file or directory>`.

- You can use `git add .` to add all unstaged changes to the staging area
    - `.` always refers to the current directory
- You can also use `*` to represent any sort of filename
  - e.g. add all `.txt` files via `*.txt`

## Tracking Changes: `git commit`

All changes in the staging area are commited with <br> `git commit`

```bash
git status
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
#   new file:   example.txt
```

Let's commit the new change
```bash
git commit -m "Creating example.txt"
# [main (root-commit) ed61bb5] Adding example.txt
#  1 file changed, 1 insertion(+)
#  create mode 100644 example.txt

git status
# On branch main
# nothing to commit, working tree clean
```

## Tracking changes: `git commit`

- The name git "commit", might already suggest it, but once a change is *commited* it becomes significantly harder to remove it.
- The classic way to undo a commited change in git would be to make another commit with the reverse change.
- Modifying a commit is possible, but you should now what you are doing. Typically this is called "changing history" and is (esp. in collaborative settings) frowned upon.

# Questions?

# Demo: Using git via the CLI

## Tracking changes: Practical (1/2) {background-color="black"}

In between each step, check the repository status with `git status`.

1. Open a terminal in the directory `git-exercise` you created earlier
    - Windows: start menu -> Git Bash, MacOS: Terminal app
2. Initialize a git repository there (`init`)
3. Create a new text file called `hello.txt` with the contents "Hello!"
4. Add the file to the staging area (`add`)
5. Commit the new file (`commit`)

## Tracking changes: Practical (2/2) {background-color="black"}

In between each step, check the repository status with `git status`.

6. Change the text in `hello.txt` to read "Hello there!"
7. Add the file to the staging area (`add`)
8. Commit the new file (`commit`)

## Seeing Changes: `git status`

You can see the high-level changes and what is about to happen with <br>
`git status`

```bash
# ...we change the contents of example.txt

git status
# On branch main
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git restore <file>..." to discard changes in working directory)
#         modified:   example.txt

# no changes added to commit (use "git add" and/or "git commit -a")
```

## Seing Changes: `git diff`

You can see the actual *unstaged* changes, line by line with <br>
`git diff`

```bash
# ...we changed the contents of example.txt

git diff
# diff --git a/example.txt b/example.txt
# index 10ddd6d..980a0d5 100644
# --- a/example.txt
# +++ b/example.txt
# @@ -1 +1 @@
# -Hello!
# +Hello World!
```

:::{.callout-note}
`git diff` only allows you to see changes to files which have already been commited before i.e. changing the contents of an existing file.
:::

## Un-Tracking changes: `git reset`

- You can reset your staging area with `git reset`, removing all staged files
- To remove specific files from the staging area use `git reset <filename / directory>`

```bash
# We add all changes
git add .

git status
# On branch main
# Changes to be committed:
#   (use "git restore --staged <file>..." to unstage)
#         modified:   example.txt

git reset
# Unstaged changes after reset:
# M       example.txt
```

## Un-Doing changes: `git restore`

You can *undo* any changes to files with <br>
`git restore`

```bash
# ...we changed the contents of example.txt

git status
# On branch main
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git restore <file>..." to discard changes in working directory)
#         modified:   example.txt

# no changes added to commit (use "git add" and/or "git commit -a")

git restore example.txt

git status
# On branch new-branch
# nothing to commit, working tree clean
```

## Un-Doing changes: `git restore`

You can *undo* any changes to files with <br>
`git restore`

- This is one of the super-powers of using git, allowing you to just go ahead and change your files without wasting time having to create backups

## Interim: The anatomy of a git command üîçÔ∏è

Git commands, like many other CLI tools follow a certain structure:

```bash
git status

git commit -m "Adding example.txt"

git config --global user.name "Your Name"
```

With `-h` you can get help on any git command

```bash
git status -h
git commit -h
```

# Questions?

# Quick Recap Quiz

<https://lmu.onlineted.de/overview/live>

::: attribution
Source: [aspencer8111's gist `Try-Git-Quiz.md`](https://gist.github.com/aspencer8111/17a80fb0a2be7b4718237fe8caa6e09c)
:::

## Quick Recap Quiz {data-visibility="hidden"}

1. What is correct command to initialize a new git repository ?
    a) `git new`
    b) `git add`
    c) `git init`  <!-- correct -->
    d) `git initialize`


## Quick Recap Quiz {data-visibility="hidden"}

2. What is correct command to stage a new file or add file changes to stage?
    a) `git stage`
    b) `git add` <!-- correct -->
    c) `git filename`
    d) There is no stage

## Quick Recap Quiz {data-visibility="hidden"}

3. What is correct command to commit staged files?
    a) `git commit` <!-- correct -->
    b) `git comment`
    c) `git lockdown`
    d) `git push`

## Quick Recap Quiz {data-visibility="hidden"}

4. When do we need to append a message while using git?
    a) While staging: `git add -m 'adding files ______'`
    b) While adding a remote: `git remote add -m 'adding github'`
    c) While initializing a repo: `git init -m 'initial commit'`
    d) While commiting: `git commit -m 'initial commit'` <!-- correct -->

## Quick Recap Quiz {data-visibility="hidden"}

5. What is correct command to check the current git status?
    a) `git status` <!-- correct -->
    b) `git log`
    c) `gs`
    d) `git push`

## Quick Recap Quiz {data-visibility="hidden"}

6. To stage only files with a `.txt` extention, the command is?
    a) `git add *.txt` <!-- correct -->
    b) `git add *.text`
    c) `git add -a .txt`
    d) `git add - *.txt`

<!-- TODO: Reset HEAD?, git rm etc., git diff -->

## Practical: Let's create a git command library{background-color="black"}

1. Create a new file `library.txt` in your `git-example` directory
2. Run `git init -h` and copy the output into your `library.txt`
3. Explore the repo status using `git status` and `git diff`
4. Commit the changes (with a good commit message)
5. Delete the `library.txt` and restore it

## Let's get Graphical: Tracking Changes in SourceTree

![The labels in Sourcetree mirror the names within the git CLI](images/screenshots/sourcetree-test.png)

- Demo!

## Practical: Let's create a git command library{background-color="black"}

1. Run `git <command> -h` and copy the output into your `library.txt`
2. Explore the repo status using the GUI
2. Commit the changes (with a good commit message)
5. Repeat steps 2. - 4. for **2 of the commands** we learned so far, using separate commits each time
6. Delete the `library.txt` and restore it

## Let's get Graphical: Tracking Changes in VSCode

![Since VSCode is primarily a text editor, git functionality is hidden in the sidebar](images/screenshots/vscode-git.png)

- Demo!

## Practical: Let's create a git command library{background-color="black"}

1. Create a new file `library.txt` in your `git-example` directory
2. Run `git init -h` and copy the output into your `library.txt`
3. Commit the changes (with a good commit message)
4. Explore the repo status in between 2 and 3 using `git status` and `git diff`
5. Repeat steps 2. - 4. for **2 of the commands** we learned so far, using separate commits each time
6. Delete the `library.txt` and restore it

## Practical: Binary Files {background-color="black"}

1. Create a Word document called `library.docx` and copy over the contents from `library.txt`
2. Run `git stash -h` and copy the output into both `library.docx` and `library.txt`
3. Use `git diff` to compare how the same change is recognized by git in the two documents

# Temporarily Storing Changes: `git stash`

- If you're not yet ready to commit your changes, but want to quickly store them and work on something else, you can do so with `git stash`
- When stashing your changes, all changes will be removed (similarly to `git restore`), but they will be saved
- See all stashes via `git stash list`
- Apply your stahes via `git stash apply`
