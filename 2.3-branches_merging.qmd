---
title: "Intro to `git`"
subtitle: "Block 2.3: Branches & Merging"
---

# Alternate Realities: <br> `git branches` {background-color="black" background-opacity="0.7" background-image="images/backgrounds/suganth-V1YEEItoOTE-unsplash.jpg"}

::: attribution
Background: https://unsplash.com/photos/V1YEEItoOTE
:::

## What are git branches? üå≥

- Branches allow you to have different versions of your code within the same repository next to each other
- You can switch back and forth between branches
- In the end you can merge your changes back into your `main` branch

:::{.callout-note}
The default branch used to be called `master`, this was more-or-less recently changed to `main`, but not all repositories have changed yet.
:::

## What are git branches? üå≤ {background-color="#5cbcfc"}

![Example of a repository history with branching](images/screenshots/learngitbranching/branched.png)

## Creating new branches

- There are two ways to create new branches
- `git checkout -b my-branch` ‚úÖ
  - Create a new branch and immediately check it out
- `git branch my-branch` ‚ùå
  - Create a new branch, but **don't** check it out

```bash
git checkout -b my-branch
# Switched to a new branch 'my-branch'
```

## Working on branches

- So far you have always been working on a single branch: `main`
- Nothing changes when working with multiple branches, you just have to keep an eye on your current branch

```bash
git status
# On branch my-branch
# nothing to commit, working tree clean
```

## Switching branches

You can switch branches with `git checkout` (as we've already done earlier)

```bash
git checkout my-branch
```

:::{.callout-tip}
There's no more `-b` when the branch already exists
:::

:::{.callout-note}
You can also use `git switch my-branch`, but this command is still experimental right now and may change.
:::

## Bringig it all together: Merging

- You can combine two different branches by merging them with each other
- `git merge my-branch`
  - You will merge the branch that you name in the command *into* the one you are currently on
  - In most cases you will want to be on the `main` branch when using `git merge` (but not always!)
- Merging will create a new "merge" commit

## Bringig it all together: Merging

:::{.callout-note}
Only branches with a shared history can be merged, but this should (almost) always be the case.
:::

## Visual Example of Merging {background-color="#5cbcfc"}

![Example of a merged repository history](images/screenshots/learngitbranching/merged.png)

# Demo: [learngitbranching.js.org](https://learngitbranching.js.org/?NODEMO?) {background-color="black" background-opacity="0.7" background-image="images/backgrounds/berlin-demo-govid-loAFGkJxYzgxu3NKnZ.gif"}

::: attribution
Background: https://giphy.com/gifs/berlin-demo-govid-loAFGkJxYzgxu3NKnZ
:::

## Practical: Branches and merging {background-color="black"}

1. Go back to your Terminal in `git-exercise`
2. Create a new branch called `new-feature`
  - Make sure to also checkout that branch, you can check whether you're on it with `git status`
3. Add a commit on that new branch
4. Go back to `main`
6. Merge the `new-feature` branch into `main`
7. Repeat all the above steps (with a different branch name & commit) using a GUI

# The Ugly Side of `git`: Merge Conflicts {background-color="black" background-opacity="0.5" background-image="images/backgrounds/git-merge-cFkiFMDg3iFoI.gif"}

## What are Merge Conflicts?

- `git` is very smart in the way it combines changes from two branches
  - **But** there's not always a clear solution
- If git doesn't know how to merge the two branches, we get a *merge conflict*
  - Merge conflicts have to be manually resolved (by us)

## How to Get a Merge Conflict üß®

And how to avoid it.

- Merge conflcits occur when there are edits to the same file (and at the same location) on two different branches
- If you merge your branches / edits before making more changes, you can avoid conflicts

## Merge Conflicts: Illustration (1)

![Starting situation, each box corresponds to the file's contents in a commit](images/drawings/merge-conflict-start.svg)

## Merge Conflicts: Illustration (2)

![The merge conflict arises because both change the same line](images/drawings/merge-conflict-end.svg)

## Merge Conflicts: Illustration (3)

![We could've avoided the merge conflict, by merging main into feature before doing the change on feature](images/drawings/merge-conflict-avoid.svg)

## Resolving Merge Conflicts

- To resolve a merge conflict, we will have to pick one of the two versions
  - Once a solution is picked for every conflict you can commit the solution and the merge continues / finishes
- Picking a solution is easiest to do by using GUI tools
  - Both Sourcetree and VSCode have great UIs for this

# DEMO: Resolving merge conflicts in VS Code and SourceTree

# *Practical:* Creating & Resolving a Merge Conflict {background-color="black"}

## Practical: Setup {background-color="black"}

1. Create a new file called `guessing_conflict.txt`
2. Write the "Question" with the letters A to D into the file, with empty lines in between e.g.

```text
Question A

Question B

Question C

Question D

```

## Practical: Setup {background-color="black"}

3. Create a new branch called `guesses` and check it out
    - Double check whether you checked out the correct branch with `git status`
4. We're done with the preparations

## Practical: Guessing Game {background-color="black"}

Write your guess below the line with the matching letter.

a) How many liters of Beer have been drunken at the Oktoberfest in Munich in 2019? üçª
b) How many people live in Karlsruhe? (Exactly) üèòÔ∏è
c) What percentage of Americans asked in a survey in 2017, indicated that they believe in Astrology? üåü
d) What percentage (same sample as C), indicated that they believe in psychics? üîÆ

## Practical: Guessing Game Answers {background-color="black"}

5. Check out the `main` branch again
6. Write down the actual answers below the letters in the now empty file again

```text
Question A üçª Liters of beer [^1]
7,850,200
Question B üèòÔ∏è People in Karlsruhe
313,092
Question C üåü % believing in Astrology [^2]
29%
Question D üîÆ % believing in Psychis [^2]
41%
```

[^1]: https://opendata.muenchen.de/tr/dataset/oktoberfest
[^2]: https://www.pewresearch.org/fact-tank/2018/10/01/new-age-beliefs-common-among-both-religious-and-nonreligious-americans/
https://opendata.muenchen.de/tr/dataset/oktoberfest

## Practical: The Actual Conflcit {background-color="black"}

7. Use `git merge` to merge the `guesses` branch into your `main` branch
8. Explore the files in the resulting merge conflict
9. Resolve the merge conflict

## Extra Practical: *learngitbranching* {background-color="black"}

1. Go to https://learngitbranching.js.org/
2. Finish Lessons 1, 2 and 3 on the website

## Rebasing: The Alternative to Merging (bonus)

- You can also combine two branches by rebasing them (instead of merging)
- When rebasing, all extra commits on your current branch will be moved to the target branch
  - This alters the affected commits ‚ÄºÔ∏è
  - Leads to a single history
- Use with caution

```bash
# You call git rebase e.g. on the feature branch
git checkout feature
```

::: attribution
More Info: <https://www.atlassian.com/git/tutorials/merging-vs-rebasing>
:::
